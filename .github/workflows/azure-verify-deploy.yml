name: Verify and Deploy

on:
  pull_request:
    branches:
      - main
      - development
  push:
    branches:
      - main
      - development

jobs:
  verify_and_deploy:
    name: Verify and Deploy
    runs-on: ubuntu-latest

    env:
      AZURE_STATIC_WEB_APPS_API_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
      APP_LOCATION: "src"
      OUTPUT_LOCATION: "dist/bhagavad-gita/browser"
      AZURE_STATIC_WEB_APPS_URL: ${{ secrets.AZURE_STATIC_WEB_APPS_URL }}

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Step 3: Set Deployment Environment
      - name: Set Deployment Environment
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            if [ "${{ github.ref_name }}" == "main" ]; then
              echo "SWA_CLI_DEPLOY_ENV=Production" >> $GITHUB_ENV
            else
              echo "SWA_CLI_DEPLOY_ENV=development" >> $GITHUB_ENV
            fi
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            if [ "${{ github.base_ref }}" == "main" ]; then
              echo "SWA_CLI_DEPLOY_ENV=Production" >> $GITHUB_ENV
            else
              echo "SWA_CLI_DEPLOY_ENV=development" >> $GITHUB_ENV
            fi
          fi

      # Step 4: Install dependencies
      - name: Install Dependencies
        run: npm install -legacy-peer-deps

      # Step 5: Install Angular CLI
      - name: Install Angular CLI
        run: npm install -g @angular/cli@19

      # Step 6: Install Angular CLI
      - name: Run unit tests
        run: npm test

      # Step 7: Install API Dev Dependencies
      - name: Install API Dev Dependencies
        run: |
          cd api
          npm install
          cd -

      # Step 8: Run API Unit Tests
      - name: Run API Unit Tests
        run: |
          cd api
          npm test
          cd -

      # Step 9: Build the application
      - name: Build Application
        run: |
          echo "Building application for environment: $SWA_CLI_DEPLOY_ENV"
          if [ "$SWA_CLI_DEPLOY_ENV" = "Production" ]; then
            npx ng build --configuration=production
          else
            npx ng build --configuration=$SWA_CLI_DEPLOY_ENV
          fi

      # Step 10: Install API dependencies
      - name: Install API Dependencies
        run: |
          cd api
          npm install --production
          cd -

      # Step 11: Print Event Info
      - name: Debug Event Info
        run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "Base Ref: ${{ github.base_ref }}"
          echo "Ref Name: ${{ github.ref_name }}"
          echo "Deployment Environment: $SWA_CLI_DEPLOY_ENV"

      # Step 12: Conditionally deploy to Azure Static Web Apps
      - name: Deploy to Azure Static Web Apps
        if: >
          (github.event_name == 'pull_request' && github.base_ref == 'development') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/main')
        env:
          DEPLOYMENT_ENVIRONMENT: ${{ env.DEPLOYMENT_ENVIRONMENT }}
        run: |
          npx @azure/static-web-apps-cli deploy \
            --app-location ${{ env.APP_LOCATION }} \
            --api-location api \
            --output-location ${{ env.OUTPUT_LOCATION }} \
            --deployment-token ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN }} \
            --api-language node \
            --api-version 20

      # Step 13: Set up Python
      - name: Set up Python
        if: >
          (github.event_name == 'pull_request' && github.base_ref == 'development') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/main')
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Step 14: Set up Python venv and install Robot Framework
      - name: Set up venv and install Robot Framework
        if: >
          (github.event_name == 'pull_request' && github.base_ref == 'development') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/main')
        run: |
          python -m venv rf-venv
          source rf-venv/bin/activate
          pip install --upgrade pip
          pip install -r robot-tests/requirements.txt
          
      # Step 15: Install Robot Framework Browser
      - name: Initialize Robot Framework Browser
        if: >
          (github.event_name == 'pull_request' && github.base_ref == 'development') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/main')
        run: |
          source rf-venv/bin/activate
          rfbrowser init

      # Step 16: Set AZURE_STATIC_WEB_APPS_URL based on environment
      - name: Set AZURE_STATIC_WEB_APPS_URL
        run: |
          if [ "$SWA_CLI_DEPLOY_ENV" = "Production" ]; then
            echo "AZURE_STATIC_WEB_APPS_URL=${{ secrets.AZURE_STATIC_WEB_APPS_URL_PROD }}" >> $GITHUB_ENV
          else
            echo "AZURE_STATIC_WEB_APPS_URL=${{ secrets.AZURE_STATIC_WEB_APPS_URL_DEV }}" >> $GITHUB_ENV
          fi

      # Step 17: Run Robot UI Tests
      - name: Run Robot UI Tests
        if: >
          (github.event_name == 'pull_request' && github.base_ref == 'development') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/main')
        run: |
          source rf-venv/bin/activate
          robot --variable HEADLESS:true --variable APP_URL:${{ env.AZURE_STATIC_WEB_APPS_URL }} robot-tests/ui_tests.robot

      # Step 18: Run Robot API Tests
      - name: Run Robot API Tests
        if: >
          (github.event_name == 'pull_request' && github.base_ref == 'development') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/main')
        run: |
          source rf-venv/bin/activate
          robot --variable API_URL:${{ env.AZURE_STATIC_WEB_APPS_URL }}/api robot-tests/api_tests.robot